basePath: /
definitions:
  dto.AudioWithoutData:
    properties:
      created_at:
        type: string
      mime_type:
        type: string
      name:
        type: string
      uid:
        type: string
    type: object
  dto.ImageWithoutData:
    properties:
      created_at:
        type: string
      mime_type:
        type: string
      name:
        type: string
      uid:
        type: string
    type: object
  models.Audio:
    properties:
      created_at:
        type: string
      data:
        description: For PostgreSQL
        items:
          type: integer
        type: array
      mime_type:
        type: string
      name:
        type: string
      uid:
        type: string
    type: object
  models.Image:
    properties:
      created_at:
        type: string
      data:
        description: For PostgreSQL
        items:
          type: integer
        type: array
      mime_type:
        type: string
      name:
        type: string
      uid:
        type: string
    type: object
  models.Register:
    properties:
      audio_uid:
        type: string
      body:
        type: string
      created_at:
        type: string
      image_uid:
        type: string
      local:
        type: string
      risk_scale:
        type: integer
      status:
        type: string
      title:
        type: string
      uid:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      password:
        type: string
      role:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API para o projeto aplicado do Senai
  title: Senai Projeto Aplicado I API
  version: "1.0"
paths:
  /api/audios:
    get:
      description: Returns a list of all audios without the file data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AudioWithoutData'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all audios (metadata only)
      tags:
      - audios
    post:
      consumes:
      - multipart/form-data
      description: Saves an audio file to the database
      parameters:
      - description: Audio to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Audio'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload an audio file
      tags:
      - audios
  /api/audios/{uid}:
    get:
      description: Retrieves an audio file by UID from the database
      parameters:
      - description: Audio UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Download an audio file
      tags:
      - audios
  /api/health:
    get:
      consumes:
      - application/json
      description: Retorna status OK se API estiver funcionando corretamente
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verificar saúde da API
      tags:
      - sistema
  /api/images:
    get:
      description: Returns a list of all images without the file data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ImageWithoutData'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all images (metadata only)
      tags:
      - images
    post:
      consumes:
      - multipart/form-data
      description: Saves an image to the database
      parameters:
      - description: Image to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Image'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload an image
      tags:
      - images
  /api/images/{uid}:
    get:
      description: Retrieves an image by UID from the database
      parameters:
      - description: Image UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Download an image
      tags:
      - images
  /api/registers:
    get:
      consumes:
      - application/json
      description: Recupera todos os registros do banco de dados
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Register'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Obter todos os registros
      tags:
      - registers
    post:
      consumes:
      - application/json
      description: Cria um novo registro no banco de dados
      parameters:
      - description: Dados do Registro
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.Register'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Register'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Criar um novo registro
      tags:
      - registers
  /api/users:
    get:
      consumes:
      - application/json
      description: Retrieves all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Cria um novo usuário no banco de dados
      parameters:
      - description: Dados do Usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Criar um novo usuário
      tags:
      - users
  /api/users/{id}:
    get:
      consumes:
      - application/json
      description: Recupera um usuário pelo ID do banco de dados
      parameters:
      - description: ID do Usuário
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Obter um usuário específico
      tags:
      - users
swagger: "2.0"
